using Luban;
using System.Threading.Tasks;

{{namespace_with_grace_begin __namespace}}
public partial class {{__name}}
{
    {{~for table in __tables ~}}
{{~if table.comment != '' ~}}
    /// <summary>
    /// {{escape_comment table.comment}}
    /// </summary>
{{~end~}}
    public {{table.full_name}} {{format_property_name __code_style table.name}} {get; private set; }
    {{~end~}}

    //public {{__name}}(System.Func<string, ByteBuf> loader)
    //{
    //    {{~for table in __tables ~}}
    //    {{format_property_name __code_style table.name}} = new {{table.full_name}}(loader("{{table.output_data_file}}"));
    //    {{~end~}}
    //    ResolveRef();
    //}
    
    public async Task Init(System.Func<string, Task<SimpleJSON.JSONNode>> loader, float timeSlice = -1)
    {
        await Task.Yield();
    }
    
    public async Task Init(System.Func<string, Task<ByteBuf>> offsetLoader,  System.Func<string, int, int, Task<ByteBuf>> byteBufLoader, float timeSlice = -1)
    {
        await Task.Yield();
    }
    
    public {{__name}} () { }
    
    public async Task Init(System.Func<string, Task<ByteBuf>> loader, float timeSlice = -1)
    {
        float time = 0;
        if (timeSlice < 0)
        {
            timeSlice = float.MaxValue;
        }
        
        Task<ByteBuf> result = null;
        
        {{~for table in __tables ~}}
        time = UnityEngine.Time.realtimeSinceStartup;
        //UnityEngine.Profiling.Profiler.BeginSample("[Tables] Load Config : {{table.output_data_file}}");
        result = loader("{{table.output_data_file}}"); await result;
        {{format_property_name __code_style table.name}} = new {{table.full_name}}(result.Result);
        //UnityEngine.Profiling.Profiler.EndSample();
        if (UnityEngine.Time.realtimeSinceStartup - time > timeSlice) await Task.Yield();
        {{~end~}}
        
        ResolveRef();
        await Task.Yield();
    }
    
    private void ResolveRef()
    {
        {{~for table in __tables ~}}
        {{format_property_name __code_style table.name}}.ResolveRef(this);
        {{~end~}}
    }
}

{{namespace_with_grace_end __namespace}}